package armify.util;

import ghidra.framework.store.LockException;
import ghidra.program.model.address.Address;
import ghidra.program.model.address.AddressOverflowException;
import ghidra.program.model.address.AddressSpace;
import ghidra.program.model.listing.Program;
import ghidra.program.model.mem.Memory;
import ghidra.program.model.mem.MemoryAccessException;
import ghidra.program.model.mem.MemoryBlock;
import ghidra.program.model.mem.MemoryConflictException;
import ghidra.util.task.TaskMonitor;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.ArrayList;

public class ProgramMemory {
    public static void createPeripheralBlock(Program program)
            throws MemoryConflictException, LockException, AddressOverflowException {

        long length = 0x5FFF_FFFFL - 0x4000_0000L + 1;

        createMemoryBlock(
                program, "peripherals", 0x4000_0000L, length, true, true, false, true
        );
    }

    public static void createMemoryBlock(
            Program program,
            String name, long start,
            long length, boolean read,
            boolean write, boolean execute,
            boolean volatile_
    ) throws AddressOverflowException, LockException, MemoryConflictException {
        ghidra.program.model.mem.Memory mem = program.getMemory();
        AddressSpace space = program.getAddressFactory().getDefaultAddressSpace();
        Address startAdr = space.getAddress(start);

        MemoryBlock pb = mem.createUninitializedBlock(name, startAdr, length, false);
        pb.setRead(read);
        pb.setWrite(write);
        pb.setExecute(execute);
        pb.setVolatile(volatile_);
        pb.setComment("Generated by ARMify Plugin");
    }

    public static void removePeripheralBlock(Program program) throws LockException {
        Memory mem = program.getMemory();
        for (MemoryBlock blk : mem.getBlocks()) {
            if ("peripherals".equalsIgnoreCase(blk.getName())) {
                mem.removeBlock(blk, TaskMonitor.DUMMY);
            }
        }
    }

    public static void removeMemoryBlockByComment(Program program, String comment) throws LockException {
        Memory mem = program.getMemory();
        MemoryBlock[] blocks = mem.getBlocks();

        for (MemoryBlock block : blocks) {
            if (comment.equals(block.getComment())) {
                mem.removeBlock(block, TaskMonitor.DUMMY);
            }
        }
    }

    public static ArrayList<Long> getSPAndResetVector(Program program) throws MemoryAccessException {
        ArrayList<Long> results = new ArrayList<>();
        Address vectorBase = program.getMinAddress();
        Memory mem = program.getMemory();

        byte[] hdr = new byte[8];
        mem.getBytes(vectorBase, hdr);

        ByteBuffer bb = ByteBuffer.wrap(hdr).order(ByteOrder.LITTLE_ENDIAN);
        results.add(Integer.toUnsignedLong(bb.getInt(0)));
        results.add(Integer.toUnsignedLong(bb.getInt(4)));

        return results;
    }

    public static void removeUserBlocks(Program program) throws LockException {
        Memory mem = program.getMemory();
        for (MemoryBlock blk : mem.getBlocks()) {
            if (!blk.getSourceName().equalsIgnoreCase("Elf Loader") &&
                    !blk.getSourceName().equalsIgnoreCase("Binary Loader")) {
                mem.removeBlock(blk, TaskMonitor.DUMMY);
            }
        }
    }
}
